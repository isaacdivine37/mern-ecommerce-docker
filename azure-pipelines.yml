trigger:
  - main

pool:
  name: 'Default'
  demands:
    - agent.name -equals MAZI

variables:
  NODE_VERSION: '18.x'
  AZURE_SUBSCRIPTION: 'mern-ecommerce application'
  BACKEND_APP_NAME: 'mern-ecommerce-backend'
  FRONTEND_APP_NAME: 'mern-ecommerce-frontend'

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: $(NODE_VERSION)
    displayName: "Use Node.js $(NODE_VERSION)"

  - script: node --version && npm --version
    displayName: "Check Node.js and npm versions"

  # Debug: Check directory structure
  - script: |
      echo "=== Repository Structure Debug ==="
      echo "Current directory: $(pwd)"
      echo ""
      echo "Root directory contents:"
      ls -la
      echo ""
      echo "Looking for package.json files:"
      find . -name "package.json" -type f
      echo ""
      echo "Directory structure:"
      tree -L 2 || find . -type d -maxdepth 2
    displayName: "Debug: Repository Structure"

  # Set dynamic variables based on actual structure
  - script: |
      # Check for backend directory
      if [ -d "server" ]; then
        echo "##vso[task.setvariable variable=BACKEND_DIR]server"
      elif [ -d "backend" ]; then
        echo "##vso[task.setvariable variable=BACKEND_DIR]backend"
      elif [ -d "api" ]; then
        echo "##vso[task.setvariable variable=BACKEND_DIR]api"
      elif [ -f "package.json" ] && grep -q "express\|fastify\|koa" package.json; then
        echo "##vso[task.setvariable variable=BACKEND_DIR]."
      else
        echo "##vso[task.setvariable variable=BACKEND_DIR]NOT_FOUND"
      fi

      # Check for frontend directory
      if [ -d "client" ]; then
        echo "##vso[task.setvariable variable=FRONTEND_DIR]client"
      elif [ -d "frontend" ]; then
        echo "##vso[task.setvariable variable=FRONTEND_DIR]frontend"
      elif [ -d "web" ]; then
        echo "##vso[task.setvariable variable=FRONTEND_DIR]web"
      elif [ -d "app" ]; then
        echo "##vso[task.setvariable variable=FRONTEND_DIR]app"
      else
        echo "##vso[task.setvariable variable=FRONTEND_DIR]NOT_FOUND"
      fi
    displayName: "Detect Project Structure"

  # Install backend dependencies
  - script: |
      if [ "$(BACKEND_DIR)" != "NOT_FOUND" ]; then
        echo "Installing backend dependencies in: $(BACKEND_DIR)"
        cd $(BACKEND_DIR)
        npm install
        echo "Backend dependencies installed successfully"
      else
        echo "##vso[task.logissue type=error]Backend directory not found!"
        exit 1
      fi
    displayName: "Install Backend Dependencies"

  # Install frontend dependencies and build
  - script: |
      if [ "$(FRONTEND_DIR)" != "NOT_FOUND" ]; then
        echo "Building frontend in: $(FRONTEND_DIR)"
        cd $(FRONTEND_DIR)
        npm install
        npm run build
        echo "Frontend built successfully"
      else
        echo "##vso[task.logissue type=error]Frontend directory not found!"
        exit 1
      fi
    displayName: "Build Frontend"

  # Package backend
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(BACKEND_DIR)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
      replaceExistingArchive: true
    displayName: "Package Backend"
    condition: ne(variables['BACKEND_DIR'], 'NOT_FOUND')

  # Package frontend
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(FRONTEND_DIR)/build'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
      replaceExistingArchive: true
    displayName: "Package Frontend Build"
    condition: ne(variables['FRONTEND_DIR'], 'NOT_FOUND')

  # Deploy Backend
  - task: AzureWebApp@1
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'
      appType: 'webAppLinux'
      appName: '$(BACKEND_APP_NAME)'
      package: '$(Build.ArtifactStagingDirectory)/backend.zip'
      runtimeStack: 'NODE|18-lts'
    displayName: "Deploy Backend to Azure"
    condition: ne(variables['BACKEND_DIR'], 'NOT_FOUND')

  # Deploy Frontend
  - task: AzureWebApp@1
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'
      appType: 'webAppLinux'
      appName: '$(FRONTEND_APP_NAME)'
      package: '$(Build.ArtifactStagingDirectory)/frontend.zip'
      runtimeStack: 'NODE|18-lts'
    displayName: "Deploy Frontend to Azure"
    condition: ne(variables['FRONTEND_DIR'], 'NOT_FOUND')