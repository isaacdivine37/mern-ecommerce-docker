trigger:
  - main

pool:
  name: 'Default'
  demands:
    - agent.name -equals MAZI

variables:
  NODE_VERSION: '18.x'
  AZURE_SUBSCRIPTION: 'mern-ecommerce application'
  BACKEND_APP_NAME: 'mern-ecommerce-backend'
  FRONTEND_APP_NAME: 'mern-ecommerce-frontend'

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: $(NODE_VERSION)
    displayName: "Use Node.js $(NODE_VERSION)"

  - script: |
      node --version
      npm --version
    displayName: "Check Node.js and npm versions"

  # Debug: Check directory structure using PowerShell
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "=== Repository Structure Debug ==="
        Write-Host "Current directory: $(Get-Location)"
        Write-Host ""
        Write-Host "Root directory contents:"
        Get-ChildItem | Format-Table Name, Mode, Length, LastWriteTime
        Write-Host ""
        Write-Host "Looking for package.json files:"
        Get-ChildItem -Recurse -Name "package.json"
        Write-Host ""
        Write-Host "Checking for common folder structures:"
        $folders = @("server", "backend", "api", "client", "frontend", "web", "app")
        foreach ($folder in $folders) {
            if (Test-Path $folder) {
                Write-Host "✓ Found: $folder"
            } else {
                Write-Host "✗ Not found: $folder"
            }
        }
    displayName: "Debug: Repository Structure"

  # Detect project structure using PowerShell
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        # Check for backend directory
        $backendDir = "NOT_FOUND"
        if (Test-Path "server") {
            $backendDir = "server"
        } elseif (Test-Path "backend") {
            $backendDir = "backend"
        } elseif (Test-Path "api") {
            $backendDir = "api"
        } elseif (Test-Path "package.json") {
            $backendDir = "."
        }
        Write-Host "##vso[task.setvariable variable=BACKEND_DIR]$backendDir"
        Write-Host "Backend directory set to: $backendDir"

        # Check for frontend directory
        $frontendDir = "NOT_FOUND"
        if (Test-Path "client") {
            $frontendDir = "client"
        } elseif (Test-Path "frontend") {
            $frontendDir = "frontend"
        } elseif (Test-Path "web") {
            $frontendDir = "web"
        } elseif (Test-Path "app") {
            $frontendDir = "app"
        }
        Write-Host "##vso[task.setvariable variable=FRONTEND_DIR]$frontendDir"
        Write-Host "Frontend directory set to: $frontendDir"
    displayName: "Detect Project Structure"

  # Install backend dependencies
  - script: |
      if "$(BACKEND_DIR)" == "NOT_FOUND" (
        echo Backend directory not found!
        exit /b 1
      )
      echo Installing backend dependencies in: $(BACKEND_DIR)
      cd $(BACKEND_DIR)
      npm install
    displayName: "Install Backend Dependencies"
    condition: ne(variables['BACKEND_DIR'], 'NOT_FOUND')

  # Build frontend
  - script: |
      if "$(FRONTEND_DIR)" == "NOT_FOUND" (
        echo Frontend directory not found!
        exit /b 1
      )
      echo Building frontend in: $(FRONTEND_DIR)
      cd $(FRONTEND_DIR)
      npm install
      npm run build
    displayName: "Build Frontend"
    condition: ne(variables['FRONTEND_DIR'], 'NOT_FOUND')

  # Package backend
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(BACKEND_DIR)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
      replaceExistingArchive: true
    displayName: "Package Backend"
    condition: ne(variables['BACKEND_DIR'], 'NOT_FOUND')

  # Package frontend build
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(FRONTEND_DIR)/build'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
      replaceExistingArchive: true
    displayName: "Package Frontend Build"
    condition: ne(variables['FRONTEND_DIR'], 'NOT_FOUND')

  # Deploy Backend
  - task: AzureWebApp@1
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'
      appType: 'webAppLinux'
      appName: '$(BACKEND_APP_NAME)'
      package: '$(Build.ArtifactStagingDirectory)/backend.zip'
      runtimeStack: 'NODE|18-lts'
    displayName: "Deploy Backend to Azure"
    condition: ne(variables['BACKEND_DIR'], 'NOT_FOUND')

  # Deploy Frontend
  - task: AzureWebApp@1
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'
      appType: 'webAppLinux'
      appName: '$(FRONTEND_APP_NAME)'
      package: '$(Build.ArtifactStagingDirectory)/frontend.zip'
      runtimeStack: 'NODE|18-lts'
    displayName: "Deploy Frontend to Azure"
    condition: ne(variables['FRONTEND_DIR'], 'NOT_FOUND')